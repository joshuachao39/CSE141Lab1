decrypt:
lb $r0,64($r0)
xor $r1,$r0,32
li  $r2,0
initLoop:
sb $r2(temp_ivs),$r1
add $r2,$r2,1
ble $r2,7,initLoop
li $r2,255
li $r3,1
tapLoop:
lb $r0, $r3(###)	  # r0 = current byte
xor $r4,$r0,32
li $r5,0
innerLoop:
sl  $r6,1,$r5
and $r6,$r6,$r2
beq $r6,0,innerLoopEnd
lb $r6,$r5(temp_iv)
getParity $r7,$r6,$r5
sll $r6,$r6,1
or  $r6,$r6,$r7
bne $r6,$r4,setZero
sb  $r5(temp_iv),$r6
ba  innerLoopEnd
setZero:
li $r7,1
sl $r6,$r7,$r5
or $r2,$r2,$r6
innerLoopEnd:
add $r5,$r5,1
bl  $r5,0x9,innerLoop
li  $r5,0
getIndexLoop:
and $r3,$r2,0x1
beq $r3,0x1,endIndexLoop
add $r5,$r5,1
srl $r2,$r2,0x1
endIndexLoop:
lb $r2,$r5(tap_seq_addr)
lb $r3,$r5(temp_iv)
li $r4,0x9
decodeLoop:
lb $r5,$r4(program2_addr)
xor $r6,$r3,$r5
getParity $r7,$r3,$r2
sll $r3,$r3,1
or  $r3,$r3,$r7
bne $r6,0x20,decodeLoopEnd
add $r4,$r4,1
ba decodeLoop
decodeLoopEnd:
add $r6,$r4,$zero
beq $r6,129,decodeEnd
finalLoop:
lb  $r5,$r4(program2_addr)
xor $r6,$r5,$r3
sub $r7,$r4,$r6
sb  $r7(program1_addr),$r6
getParity $r8,$r3,$r2
sll $r3,$r3,0x1
or  $r3,$r3,$r8
add $r4,$r4,0x1
bne $r4,129,decodeEnd
decodeEnd:

